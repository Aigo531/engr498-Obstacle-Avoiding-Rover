#include "stm32l476xx.h"
#include "LED.h"
#include "USART2.h"
#include "TIM2.h"
#include "TIM3.h" // Assuming TIM3 is used for PWM generation
#include "TIM4.h" // Assuming TIM4 is also used for PWM

// GPIO Pins for direction control - Placeholder values
#define MOTOR1_FORWARD_PIN    (1U << 0)  // Example: PB0
#define MOTOR1_REVERSE_PIN    (1U << 1)  // Example: PB1
#define MOTOR2_FORWARD_PIN    (1U << 2)  // Example: PB2
#define MOTOR2_REVERSE_PIN    (1U << 3)  // Example: PB3
#define MOTOR3_FORWARD_PIN    (1U << 4)  // Example: PB4
#define MOTOR3_REVERSE_PIN    (1U << 5)  // Example: PB5
#define MOTOR4_FORWARD_PIN    (1U << 6)  // Example: PB6
#define MOTOR4_REVERSE_PIN    (1U << 7)  // Example: PB7

// Functions to control motor direction
void setMotor1Direction(int forward) {
    if (forward) {
        GPIOB->BSRR = MOTOR1_FORWARD_PIN;   // Set forward
        GPIOB->BRR = MOTOR1_REVERSE_PIN;    // Reset reverse
    } else {
        GPIOB->BSRR = MOTOR1_REVERSE_PIN;   // Set reverse
        GPIOB->BRR = MOTOR1_FORWARD_PIN;    // Reset forward
    }
}

void setMotorSpeed(int motor, float dutyCycle) {
    // Assuming TIM3->CCR1, TIM3->CCR2, TIM4->CCR1, TIM4->CCR2 are configured for each motor
    switch (motor) {
        case 1:
            TIM3->CCR1 = (uint32_t)(dutyCycle * (float)(TIM3->ARR + 1));
            break;
        case 2:
            TIM3->CCR2 = (uint32_t)(dutyCycle * (float)(TIM3->ARR + 1));
            break;
        case 3:
            TIM4->CCR1 = (uint32_t)(dutyCycle * (float)(TIM4->ARR + 1));
            break;
        case 4:
            TIM4->CCR2 = (uint32_t)(dutyCycle * (float)(TIM4->ARR + 1));
            break;
    }
}

int main(void) {
    // Initializations
    USART2_Init();
    configure_PB10();
    configure_PB6();
    configure_TIM4_CH1();
    configure_TIM2_CH3();
    configure_TIM3_PWM(); // Custom function needed to setup PWM on TIM3
    configure_TIM4_PWM(); // Custom function needed to setup PWM on TIM4

    while (1) {
        float distance = get_distance();
        if (distance <= 9) {
            // Detected obstacle, decide to turn
            // Stop all motors
            setMotorSpeed(1, 0);
            setMotorSpeed(2, 0);
            setMotorSpeed(3, 0);
            setMotorSpeed(4, 0);

            // Delay for stopping
            delay(100000);

            // Example: Turn right
            setMotor1Direction(1);  // Motor 1 forward
            setMotor2Direction(0);  // Motor 2 reverse

